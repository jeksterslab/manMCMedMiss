---
title: "Benchmark"
author: Ivan Jacob Agaloos Pesigan
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Benchmark}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r}
#| include = FALSE
knitr::opts_chunk$set(
  collapse = TRUE,
  fig.path = "fig-vignettes-benchmark-",
  fig.cap = "",
  fig.width = 11,
  fig.height = 8,
  fig.retina = 2,
  dpi = 300,
  comment = "#>"
)
```

The following is a simple benchmark comparing the computational requirements of the methods to generate confidence intervals for the indirect effect with missing observations. We will use the generated data in the [Data Generation](data-generation.html) article.

In this benchmark, we compare the following methods

- Monte Carlo method using full-information maximum likelihood (`MCML()`), 
- Monte Carlo method using multiple imputation (`MCMI()`),
- full-information maximum likelihood nested within nonparametric bootstrap (`NBML()`),
- multiple imputation nested within nonparametric bootstrap (`NBMI()`)
- nonparametric bootstrap nested within multiple imputation (`MINB()`)

## Arguments

```{r}
#| message = FALSE
library(manMCMedMiss)
library(microbenchmark)
```

```{r}
#| include = FALSE
production <- TRUE
if (production) {
  m <- 100L
  R <- 5000L
  B <- 5000L
} else {
  m <- 10L
  R <- 10L
  B <- 10L
}
```

```{r}
#| echo = FALSE
variables <- c(
  "m",
  "R",
  "B",
  "mplus_bin"
)
values <- c(
  m,
  R,
  B,
  "\"/opt/mplusdemo/mpdemo\""
)
notes <- c(
  "Number of imputations.",
  "Number of Monte Carlo replications.",
  "Number of bootstrap samples.",
  "Path to Mplus binary."
)
tab <- cbind(
  Variables = variables,
  Values = values,
  Notes = notes
)
knitr::kable(
  x = tab
)
```

> **NOTE**: If you are using `manmcmedmiss-rocker` or `manmcmedmiss.sif` described in the [Containers](containers.html) article, set `mplus_bin = "mpdemo"`.

```{r}
#| include = FALSE
root <- rprojroot::is_rstudio_project
mplus_bin <- root$find_file(
  ".setup",
  "bin",
  "mpdemo"
)
```

## Benchmark

## Parameters

```{r}
#| echo = FALSE
params <- params[which(params$taskid == 59), ]
n <- params$n
tauprime <- params$tauprime
alpha <- params$alpha
beta <- params$beta
variable <- c(
  "n",
  "tauprime",
  "alpha",
  "beta"
)
value <- c(
  n,
  tauprime,
  alpha,
  beta
)
notes <- c(
  "$n$",
  "$\\tau^{\\prime}$",
  "$\\alpha$",
  "$\\beta$"
)
tab <- cbind(
  Variable = variable,
  Value = value,
  Notes = notes
)
knitr::kable(
  x = tab
)
```

## Data

### Generation

Generate sample data with complete observations.

```{r}
set.seed(42)
data_complete <- GenData(
  n = n,
  tauprime = tauprime,
  beta = beta,
  alpha = alpha
)
```

### Amputation

Generate sample data with missing values using the multivariate amputation approach proposed by Schouten et al. (2018).

```{r}
data_missing <- AmputeData(
  data_complete,
  mech = "MAR",
  prop = 0.10
)
```

### Imputation

Perform multiple imputation following Asparouhov and Muthen (2010) using `Mplus`.

```{r}
data_mi <- ImputeData(
  data_missing,
  m = m,
  mplus_bin = mplus_bin
)
```

## Maximum Likelihood

### Missing Data

Parameters of the simple mediation model are estimated using full-information maximum likelihood to handle missing data.

```{r}
fit_ml <- FitModelML(
  data_missing,
  mplus_bin = mplus_bin
)
```

## Multiple Imputation

Parameters of the simple mediation model are estimated using maximum likelihood for each of the imputed data sets. The parameter estimates and their sampling covariance matrix are pooled.

```{r}
fit_mi <- FitModelMI(
  data_mi,
  mplus_bin = mplus_bin
)
```

## Benchmark

```{r}
#| echo = FALSE,
#| message = FALSE,
#| warning = FALSE
benchmark_file <- root$find_file(
  ".data-raw",
  "benchmark.Rds"
)
if (!file.exists(benchmark_file)) {
  benchmark <- microbenchmark(
    MCML = MCML(
      fit_ml,
      R = R
    ),
    MCMI = MCMI(
      fit_mi,
      R = R
    ),
    NBML = NBML(
      data_missing,
      B = B,
      mplus_bin = mplus_bin
    ),
    NBMI = NBMI(
      data_missing,
      data_mi,
      B = B,
      m = m,
      mplus_bin = mplus_bin
    ),
    MINB = MINB(
      data_mi,
      B = B
    ),
    times = 10
  )
  saveRDS(
    object = benchmark,
    file = benchmark_file,
    compress = "xz"
  )
}
benchmark <- readRDS(
  file = benchmark_file
)
```

```{r}
#| eval = FALSE
benchmark <- microbenchmark(
  MCML = MCML(
    fit_ml,
    R = R
  ),
  MCMI = MCMI(
    fit_mi,
    R = R
  ),
  NBML = NBML(
    data_missing,
    B = B,
    mplus_bin = mplus_bin
  ),
  NBMI = NBMI(
    data_missing,
    data_mi,
    B = B,
    m = m,
    mplus_bin = mplus_bin
  ),
  MINB = MINB(
    data_mi,
    B = B
  ),
  times = 10
)
```

## Summary of Benchmark Results

```{r}
summary(benchmark, unit = "ms")
```

## Summary of Benchmark Results Relative to the Fastest Method

```{r}
summary(benchmark, unit = "relative")
```

## Plot

```{r}
#| echo = FALSE,
#| warning = FALSE,
#| message = FALSE
ggplot2::autoplot(benchmark)
boxplot(benchmark)
```

The `MC` approaches are faster compared to their `NB` counterparts. Note the increasing model complexity will increase the computational cost of `NB`. However, for `MC`, model complexity will not increase the computational cost of the simulation stage. For example, `MI` estimates are more computationally intensive than `ML` estimates. This results in a large difference between `NBML` and the two `NB` methods using `MI`, that is, `NBMI` and `MINB`. Note that `MINB` is faster than `NBMI` as expected but it is still significantly slower than the `MC` approaches.

However, if we perform the model fitting step outside the benchmark calculation, the speed of `MCML` and `MCMI` will be virtually identical. In this implementation, however, `MCMI` will be a little bit slower than `MCML` because it generates two sets of confidence intervals (`vcov` and `vcov_tilde`) while `MCML` generates a single set. Since `MC` relies on a single estimate of the parameters and the sampling covariance matrix, it is suited for more complex models.

> **NOTE**: Note that since `NB` only needs point estimates, a closed form solution of the indirect effect is used in `NBMI` and `MINB`. When optimization is used to estimate parameters in the context of structural equation modeling, `NBMI` and `MINB` will be significantly slower.

## References

Asparouhov, T., & Muthen, B. (2010). *Multiple imputation with Mplus*. Retrieved from http://www.statmodel.com/download/Imputations7.pdf

Schouten, R. M., Lugtig, P. and Vink, G. (2018). Generating missing values for simulation purposes: A multivariate amputation procedure. *Journal of Statistical Computation and Simulation*, *88*(15), 1909--1930. https://doi.org/10.1080/00949655.2018.1491577
